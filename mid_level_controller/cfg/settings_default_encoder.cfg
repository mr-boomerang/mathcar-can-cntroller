# Parameters to be passed at the beginning

# channel for CAN
can_channel: [std::string, can0]

# sudo password for the can device. Keep this empty in case you have the user
# to the can_group which gives permission to run ip commands without sudo access.
# Read installation.txt for more details.
sudo_passwd: [std::string, ]

# print raw messages in terminal for transmitter and receiver
raw_msg_rx_enable: [bool, false]
raw_msg_tx_enable: [bool, false]

# recording log messages in file
log_enable: [bool, false]
log_data_rx_enable: [bool, false]
log_data_tx_enable: [bool, false]

# debug messages for particular modules(transmitter receiver)
debug_msg_rx_enable: [bool, false]
debug_msg_tx_enable: [bool, false]

# Enable debug message for mid level controller
debug_msg_enable: [bool, false]

# Gains for controller acceleration
throttle_kp: [double, 6, -100, 100, .001]
throttle_ki: [double, 0, -100, 100, .001]
throttle_kd: [double, 3, -100, 100, .001]

# Gains for controller braking
brake_kp: [double, 12, -100, 100, .001]
brake_ki: [double, 0, -100, 100, .001]
brake_kd: [double, 2, -100, 100, .001]

# Parameters for velocity and steering
vel_limit: [double, 5, -5 ,5, .001]
steer_limit: [double, 0.687, 0, 0.7, .001]
velocity_input_units: [std::string, mps]
steer_input_units: [std::string, radian]

# Parameter for control of braking and throttle
throttle_limit: [double, 60, 0, 100, 1]
brake_limit: [double, 88, 0, 100, 1]
brake_mode: [std::string, alternate]
brake_multiplier: [int, 33, 0, 50, 1]

# publish additional ros topics for joystick
ros_topics_publish: [bool, true]

# Parameter to select controller type
controller_type: [std::string, lookup]

# Enable slope feedback if needed, input should come in radians
slope_input_enabled:  [bool, false]
slope_topic:  [std::string, slope]

# Resolution for encoder and its units
encoder_resolution: [double, 0.00208, 0, 1, .001]
encoder_units: [std::string, m]

# Intermediate control trajectory to be followed in case of joystick control
control_intermediate_trajectory_mode: [std::string, sin]
trajectory_followed: [bool, true]
total_time: [double, 1, 0, 20, .1 ]
joyType: [std::string, redgear]

# Feedback source to be taken for source
controller_feedback_source: [std::string, gateway]

# Parameter to select type of operation when controlled by keyboard
input_control_mode: [std::string, controller]

# Parameters for watch dog timers at 100  ms, 40 ms, 40 ms.
watch_dog_planner_enable: [bool, false]
watch_dog_feedback_speed_enable: [bool, false]
watch_dog_feedback_slope_enable: [bool, false]

# Parameters for allowing pid update
allow_pid_update: [bool,true]
