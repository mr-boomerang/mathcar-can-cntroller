FIND_PACKAGE(gflags QUIET)

get_filename_component( PROJECT_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH )

if(NOT WIN32)
  string(ASCII 27 Esc)
  set(RED "${Esc}[31m")
  set(RST "${Esc}[m")
endif()

if(@UTILS_USE_BOOST@)
  add_definitions(-DBOOST_NOT_CPP11)
  if(@Boost_MINOR_VERSION@ GREATER 46)
    add_definitions(-DUTILS_USE_TICTOC)
  endif()
else()
  add_definitions(--std=c++11)
  message("Added ${RED}--std=c++11${RST} flag, since util headers need it.")
  add_definitions(-DUTILS_USE_TICTOC)
endif()

if(EXISTS ${CATKIN_ENV})
  message("Catkin is configuring utils.")
  add_definitions(-DBUILT_WITH_ROS)
  if(@UTILS_USE_OPENCV@)
    add_definitions(-DUTILS_USE_OPENCV)
  endif()
  if(@UTILS_USE_STL@)
    add_definitions(-DUTILS_USE_STL)
  endif()
  if(NOT @UTILS_USE_GFLAGS@)
    add_definitions(-DUTILS_AVOID_GFLAGS)
  endif()
  #find_package(utils CONFIGS utilsConfig.cmake)
  return()
else()
  message("Configuring utils normally.")
endif()

#changes based on cmake values if user requests opencv and it's found statement
#will have if(ON), if not requested or not found then if(OFF)
if(@UTILS_USE_OPENCV@)
  add_definitions(-DUTILS_USE_OPENCV)
  set(UTILS_USE_OPENCV TRUE)
endif()
if(@UTILS_USE_STL@)
  add_definitions(-DUTILS_USE_STL)
  set(UTILS_USE_STL TRUE)
endif()
if(NOT @UTILS_USE_GFLAGS@)
  add_definitions(-DUTILS_AVOID_GFLAGS)
  set(UTILS_USE_GFLAGS TRUE)
endif()

if(NOT EXISTS ${CATKIN_ENV})
  set(utils_INCLUDE_DIRS @HEADERS@) 
  set(utils_INCLUDE_DIR @HEADERS@) 
  set(utils_INC_DIRS @HEADERS@) 
  set(utils_INC_DIR @HEADERS@) 
endif()

if(NOT TARGET @LIB_NAME@ AND NOT @PROJECT_NAME@_BINARY_DIR)
  include("${PROJECT_CMAKE_DIR}/@PROJECT_NAME@-targets.cmake")
endif()

if(NOT EXISTS ${CATKIN_ENV})
  set(utils_LIBRARIES @LIB_NAME@ @LIBS@)
  set(utils_LIBS ${utils_LIBRARIES})
endif()
